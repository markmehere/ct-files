import { hard_delete_event } from './delete_event';
import { rename_event } from './rename_event';

jest.mock("fs-extra", () => {
    let filesystem: Record<string, string> = {};
    return {
        pathExists: (path: string) => Promise.resolve(!!filesystem[path]),
        readFile: (path: string, _encoding: string) => {
            if (!filesystem[path]) {
                throw new Error(`File not found: ${path}`);
            }
            return Promise.resolve(filesystem[path]);
        },
        outputFile: (path: string, data: string, _encoding: string) => {
            filesystem[path] = data;
            return Promise.resolve();
        },
        reset: () => {
            filesystem = {};
        }
    }
});

const fs = require("fs-extra");

describe('rename_event', () => {

    beforeEach(() => {
        fs.reset();
    });

    test('renames coffee correctly to new file', async () => {
        const path = 'game.coffee';

        await fs.outputFile(path,
            '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.kill() if @.x > ct.camera.width\n\n' +
            'onClick = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n\n' +
            'onActionPressed = () ->\n' +
            '    window.score += 100\n\n' +
            'onDestroy = () ->\n' +
            '    window.birdsRemaining -= 1\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n'
        );

        await rename_event(path, 'coffeescript', 'onActionPressed', 'onActionEnterPressed');

        expect(await fs.readFile(path, 'utf8')).toBe(
            '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.kill() if @.x > ct.camera.width\n\n' +
            'onClick = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n\n' +
            'onActionEnterPressed = () ->\n' +
            '    window.score += 100\n\n' +
            'onDestroy = () ->\n' +
            '    window.birdsRemaining -= 1\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n'
        );
    });

    test('renames typescript correctly to new file', async () => {
        const path = 'game.ts';

        await fs.outputFile(path,
            '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends AnimatedSprite {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            '        const runSquawk = () => {\n' +
            '            this.squawkBlock = 500;\n' +
            '            ct.sound.spawn("squawk");\n' +
            '        };\n' +
            '    } /* end onStep */\n\n' +
            '    onClick() {\n' +
            '        window.score += 100;\n' +
            '        this.kill = true;\n' +
            '    } /* end onClick */\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    } /* end onCreate */\n\n' +
            '} /* end ab8df2e1 */\n'
        );

        await rename_event(path, 'typescript', 'onClick', 'onActionClick');

        expect(await fs.readFile(path, 'utf8')).toBe(
            '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends AnimatedSprite {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            '        const runSquawk = () => {\n' +
            '            this.squawkBlock = 500;\n' +
            '            ct.sound.spawn("squawk");\n' +
            '        };\n' +
            '    } /* end onStep */\n\n' +
            '    onActionClick() {\n' +
            '        window.score += 100;\n' +
            '        this.kill = true;\n' +
            '    } /* end onActionClick */\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    } /* end onCreate */\n\n' +
            '} /* end ab8df2e1 */\n'
        );
    });

    test('renames typescript correctly to new file', async () => {
        const path = 'game.ts';

        await fs.outputFile(path,
            '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends AnimatedSprite {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            '        const runSquawk = () => {\n' +
            '            this.squawkBlock = 500;\n' +
            '            ct.sound.spawn("squawk");\n' +
            '        };\n' +
            '    }\n\n' +
            '    onClick() {\n' +
            '        window.score += 100;\n' +
            '        this.kill = true;\n' +
            '    }\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    }\n\n' +
            '}\n'
        );

        await rename_event(path, 'typescript', 'onClick', 'onActionClick');

        expect(await fs.readFile(path, 'utf8')).toBe(
            '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends AnimatedSprite {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            '        const runSquawk = () => {\n' +
            '            this.squawkBlock = 500;\n' +
            '            ct.sound.spawn("squawk");\n' +
            '        };\n' +
            '    }\n\n' +
            '    onActionClick() {\n' +
            '        window.score += 100;\n' +
            '        this.kill = true;\n' +
            '    } /* end onActionClick */\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    }\n\n' +
            '}\n'
        );
    });
})
