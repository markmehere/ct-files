import { save_event } from './save_event';

jest.mock("fs-extra", () => {
    let filesystem: Record<string, string> = {};
    return {
        pathExists: (path: string) => Promise.resolve(!!filesystem[path]),
        readFile: (path: string, _encoding: string) => {
            if (!filesystem[path]) {
                throw new Error(`File not found: ${path}`);
            }
            return Promise.resolve(filesystem[path]);
        },
        outputFile: (path: string, data: string, _encoding: string) => {
            filesystem[path] = data;
            return Promise.resolve();
        },
        reset: () => {
            filesystem = {};
        }
    }
});

const fs = require("fs-extra");

describe('save_event', () => {

    beforeEach(() => {
        fs.reset();
    });

    test('saves coffee correctly to new file', async () => {
        const path = 'game.coffee';

        let code = '@.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
         '@.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
         '@.freeze = @.freeze - 1 if @.freeze > 0\n' +
         '@.stopFor60 = () ->\n    @.freeze = 60\n';

        let event = {
            eventKey: 'OnStep',
        };

        const parent = {
            name: 'Bird',
            uid: 'copy-1'
        }

        let result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'coffeescript' });

        let expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# Bird (Copy)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n';

        expect(result).toBe(code.trim());
        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code += '@.kill() if @.x > ct.camera.width\n'

        result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'coffeescript', basetype: 'AnimatedSprite' });

        expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# Bird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n' +
            '    @.kill() if @.x > ct.camera.width\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code += '@.kill() if @.x > ct.camera.width\n'

        let secondEvent = {
            eventKey: 'OnCreate',
        };

        let secondCode = '@x = -20\n@y = ct.camera.height * Math.random()\n'

        parent.name = 'EasyBird';

        result = await save_event(path, secondCode, secondEvent, { parent, entitytype: 'Copy', language: 'coffeescript', basetype: 'AnimatedSprite' });

        expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n' +
            '    @.kill() if @.x > ct.camera.width\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height * Math.random()\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        secondCode = '@x = -20\n@y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n'

        result = await save_event(path, secondCode, secondEvent, { parent, entitytype: 'Copy', language: 'coffeescript', basetype: 'AnimatedSprite' });

        expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze > 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze > 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n' +
            '    @.kill() if @.x > ct.camera.width\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code = '@.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\r' +
            '@.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\r' +
            '@.freeze = @.freeze - 1 if @.freeze > 0\r' +
            '@.stopFor60 = () ->\r\t@.freeze = 60\r' +
            '@.kill() if @.x > ct.camera.width\r' +
            '@.squawkBlock -= 1 if @.squawkBlock > 0\r' +
            'runSquawk = () ->\r\t@.squawkBlock = 500\r\tct.sound.spawn("squawk")\r\r';

        result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'coffeescript', basetype: 'AnimatedSprite' });

        expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n' +
            '    @.kill() if @.x > ct.camera.width\n' +
            '    @.squawkBlock -= 1 if @.squawkBlock > 0\n' +
            '    runSquawk = () ->\n' +
            '        @.squawkBlock = 500\n' +
            '        ct.sound.spawn("squawk")\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code = '@.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\r' +
            '@.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\r' +
            '@.freeze = @.freeze - 1 if @.freeze > 0\r' +
            '@.stopFor60 = () ->\r\t@.freeze = 60\r' +
            '@.kill() if @.x > ct.camera.width\r' +
            '@.squawkBlock -= 1 if @.squawkBlock > 0\r' +
            'runSquawk = () ->\r\t@.squawkBlock = 500\r\tct.sound.spawn("squawk")\r' +
            'runSquawk() if Math.random() < 0.05 and @.squawkBlock === 0\r\r';

        result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'coffeescript', basetype: 'AnimatedSprite' });

        expected = '# This file is generated by ct.js - feel free to modify its methods\n' +
            '# EasyBird (Copy/AnimatedSprite)\n\n' +
            'onStep = () ->\n' +
            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\n' +
            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\n' +
            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '    @.stopFor60 = () ->\n' +
            '        @.freeze = 60\n' +
            '    @.kill() if @.x > ct.camera.width\n' +
            '    @.squawkBlock -= 1 if @.squawkBlock > 0\n' +
            '    runSquawk = () ->\n' +
            '        @.squawkBlock = 500\n' +
            '        ct.sound.spawn("squawk")\n' +
            '    runSquawk() if Math.random() < 0.05 and @.squawkBlock === 0\n\n' +
            'onCreate = () ->\n' +
            '    @x = -20\n' +
            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);
    });

    test('saves typescript correctly to new file', async () => {
        const path = 'bird.ts';

        let code = 'if (this.freeze === 0) {\n\tthis.x = this.x + Math.floor(Math.random() * 10);\n' +
         '\tthis.y = this.y + (Math.random() * 10) - 5;\n}\n' +
         'if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
         'this.stopFor60 = () => this.freeze = 60;\n';

        let event = {
            eventKey: 'OnStep',
        };

        const parent = {
            name: 'Bird',
            uid: 'ab8df2e1'
        }

        let result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'typescript' });

        let expected = '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class Bird extends Copy {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '    } /* end onStep */\n\n' +
            '} /* end ab8df2e1 */\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code += 'if (this.x > ct.camera.width) this.kill();\n';

        result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'typescript' });

        expected = '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class Bird extends Copy {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '    } /* end onStep */\n\n' +
            '} /* end ab8df2e1 */\n';

        expect(result).toBe(code.replace(/\t/g, '    ').trim());
        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        let secondEvent = {
            eventKey: 'OnCreate',
        };

        let secondCode = 'this.x = -20;\nthis.y = ct.camera.height * Math.random();\n'

        parent.name = 'EasyBird';

        result = await save_event(path, secondCode, secondEvent, { parent, entitytype: 'Copy', language: 'typescript' });

        expected = '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends Copy {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '    } /* end onStep */\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    } /* end onCreate */\n\n' +
            '} /* end ab8df2e1 */\n';

        expect(result).toBe(secondCode.trim());
        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code += 'if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            'const runSquawk = () => {\n' +
            '    this.squawkBlock = 500;\n' +
            '    ct.sound.spawn("squawk");\n' +
            '};\n';

        result = await save_event(path, code, event, { parent, entitytype: 'Copy', language: 'typescript', basetype: 'AnimatedSprite' });

        expected = '// This class is generated by ct.js - feel free to modify its methods but please\n' +
            '// leave the /* end  ... */ comments and method signature lines intact.\n' +
            '// You cannot add methods or imports to this file.\n\n' +
            'class EasyBird extends AnimatedSprite {\n\n' +
            '    onStep() {\n' +
            '        if (this.freeze === 0) {\n' +
            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
            '        }\n' +
            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            '        this.stopFor60 = () => this.freeze = 60;\n' +
            '        if (this.x > ct.camera.width) this.kill();\n' +
            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            '        const runSquawk = () => {\n' +
            '            this.squawkBlock = 500;\n' +
            '            ct.sound.spawn("squawk");\n' +
            '        };\n' +
            '    } /* end onStep */\n\n' +
            '    onCreate() {\n' +
            '        this.x = -20;\n' +
            '        this.y = ct.camera.height * Math.random();\n' +
            '    } /* end onCreate */\n\n' +
            '} /* end ab8df2e1 */\n';

        expect(await fs.readFile(path, 'utf8')).toBe(expected);

        code = 'this.speed.x = 12;\nthis.speed.y = 0;\n';

        event = {
            eventKey: 'OnCreate',
        }

        parent.name = 'Bullet';
        parent.uid = '29d2eb3c';

        result = await save_event('bullet.ts', code, event, { parent, entitytype: 'Copy', language: 'typescript', basetype: 'AnimatedSprite' });
    });

})
