import { load_event } from './load_event';
import { CtEvent } from './save_event';

jest.mock('fs-extra', () => ({
    pathExists: (_path: string) => Promise.resolve(true),
    readFile: (path: string, _encoding: string) => {
        return Promise.resolve({
            'bird.coffee':  '# This file is generated by ct.js - feel free to modify its methods\n' +
                            '# EasyBird (Copy/AnimatedSprite)\n\n' +
                            'onStep = () ->\n' +
                            '    @.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\n' +
                            '    @.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\n' +
                            '    @.freeze = @.freeze - 1 if @.freeze > 0\n' +
                            '    @.stopFor60 = () ->\n' +
                            '        @.freeze = 60\n' +
                            '    @.kill() if @.x > ct.camera.width\n' +
                            '    @.squawkBlock -= 1 if @.squawkBlock > 0\n' +
                            '    runSquawk = () ->\n' +
                            '        @.squawkBlock = 500\n' +
                            '        ct.sound.spawn("squawk")\n' +
                            '    runSquawk() if Math.random() < 0.05 and @.squawkBlock === 0\n\n' +
                            'onCreate = () ->\n' +
                            '    @x = -20\n' +
                            '    @y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n',
            'bird.ts':      '// This class is generated by ct.js - feel free to modify its methods but please\n' +
                            '// leave the /* end  ... */ comments and method signature lines intact.\n\n' +
                            'class EasyBird extends AnimatedSprite {\n\n' +
                            '    onStep() {\n' +
                            '        if (this.freeze === 0) {\n' +
                            '            this.x = this.x + Math.floor(Math.random() * 10);\n' +
                            '            this.y = this.y + (Math.random() * 10) - 5;\n' +
                            '        }\n' +
                            '        if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
                            '        this.stopFor60 = () => this.freeze = 60;\n' +
                            '        if (this.x > ct.camera.width) this.kill();\n' +
                            '        if (this.squawkBlock > 0) this.squawkBlock--;\n' +
                            '        const runSquawk = () => {\n' +
                            '            this.squawkBlock = 500;\n' +
                            '            ct.sound.spawn("squawk");\n' +
                            '        };\n' +
                            '    } /* end onStep */\n\n' +
                            '    onCreate() {\n' +
                            '        this.x = -20;\n' +
                            '        this.y = ct.camera.height * Math.random();\n' +
                            '    } /* end onCreate */\n\n' +
                            '} /* end ab8df2e1 */\n'
        }[path]);
    }
}));

describe('load_event', () => {

    test('load coffee script event', async () => {
        const event: CtEvent = { eventKey: 'OnStep' };
        expect(
            await load_event('bird.coffee', event, 'coffeescript', 'compile')
        ).toBe(
            '@.x = @.x + Math.floor(Math.random() * 10) if @.freeze == 0\n' +
            '@.y = @.y + (Math.random() * 10) - 5 if @.freeze == 0\n' +
            '@.freeze = @.freeze - 1 if @.freeze > 0\n' +
            '@.stopFor60 = () ->\n' +
            '    @.freeze = 60\n' +
            '@.kill() if @.x > ct.camera.width\n' +
            '@.squawkBlock -= 1 if @.squawkBlock > 0\n' +
            'runSquawk = () ->\n' +
            '    @.squawkBlock = 500\n' +
            '    ct.sound.spawn("squawk")\n' +
            'runSquawk() if Math.random() < 0.05 and @.squawkBlock === 0\n\n'
        );
        const secondEvent: CtEvent = { eventKey: 'OnCreate' };
        expect(
            await load_event('bird.coffee', secondEvent, 'coffeescript', 'compile')
        ).toBe(
            '@x = -20\n' +
            '@y = ct.camera.height / 4 + (ct.camera.height / 2) * Math.random()\n'
        );
    });

    test('load typescript script event', async () => {
        const event: CtEvent = { eventKey: 'OnStep' };
        expect(
            await load_event('bird.ts', event, 'typescript', 'compile')
        ).toBe(
            'if (this.freeze === 0) {\n' +
            '    this.x = this.x + Math.floor(Math.random() * 10);\n' +
            '    this.y = this.y + (Math.random() * 10) - 5;\n' +
            '}\n' +
            'if (this.freeze > 0) this.freeze = this.freeze - 1;\n' +
            'this.stopFor60 = () => this.freeze = 60;\n' +
            'if (this.x > ct.camera.width) this.kill();\n' +
            'if (this.squawkBlock > 0) this.squawkBlock--;\n' +
            'const runSquawk = () => {\n' +
            '    this.squawkBlock = 500;\n' +
            '    ct.sound.spawn("squawk");\n' +
            '};\n'
        );
        const secondEvent: CtEvent = { eventKey: 'OnCreate' };
        expect(
            await load_event('bird.ts', secondEvent, 'typescript', 'compile')
        ).toBe(
            'this.x = -20;\n' +
            'this.y = ct.camera.height * Math.random();\n'
        );
    });
})
